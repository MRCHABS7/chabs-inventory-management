export type ID = string;

export interface Customer {
  id: ID;
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  company?: string;
  taxNumber?: string;
  paymentTerms?: string;
  creditLimit?: number;
  createdAt: string;
}

export interface Supplier {
  id: ID;
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  contactPerson?: string;
  paymentTerms?: string;
  rating: number; // 1-5 stars
  createdAt: string;
}

export interface SupplierPrice {
  id: ID;
  supplierId: ID;
  productId: ID;
  price: number;
  minimumQuantity: number;
  leadTime: number; // days
  currency: string;
  validUntil?: string;
  createdAt: string;
}

export interface BOMItem {
  id: ID;
  productId: ID; // component product
  quantity: number;
  unit: string;
  costPrice: number;
}

export interface Product {
  id: ID;
  name: string;
  sku: string;
  description?: string;
  category: string;
  unit: string;
  costPrice: number;
  sellingPrice: number;
  markup: number; // percentage
  stock: number;
  minimumStock: number;
  maximumStock: number;
  location?: string;
  barcode?: string;
  bomItems?: BOMItem[]; // Bill of Materials
  createdAt: string;
  updatedAt: string;
}

export interface QuoteItem {
  productId: ID;
  quantity: number;
  unitPrice: number;
  discount: number; // percentage
  total: number;
}

export type QuoteStatus = 'draft' | 'sent' | 'accepted' | 'rejected' | 'expired';
export type OrderStatus = 'pending' | 'confirmed' | 'preparing' | 'ready' | 'shipped' | 'delivered' | 'cancelled';

export interface Quotation {
  id: ID;
  quoteNumber: string;
  customerId: ID;
  items: QuoteItem[];
  subtotal: number;
  taxRate: number;
  taxAmount: number;
  total: number;
  validUntil: string;
  createdAt: string;
  status: QuoteStatus;
  notes?: string;
  terms?: string;
  convertedToOrder?: boolean;
  orderId?: ID;
}

export interface Order {
  id: ID;
  orderNumber: string;
  quotationId?: ID;
  customerId: ID;
  items: QuoteItem[];
  subtotal: number;
  taxRate: number;
  taxAmount: number;
  total: number;
  status: OrderStatus;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  expectedDelivery?: string;
  actualDelivery?: string;
  createdAt: string;
  updatedAt: string;
  notes?: string;
  warehouseNotes?: string;
  trackingNumber?: string;
}

export interface StockMovement {
  id: ID;
  productId: ID;
  type: 'in' | 'out' | 'adjustment';
  quantity: number;
  reason: string;
  reference?: string; // order number, supplier invoice, etc.
  createdAt: string;
  createdBy: string;
}

export interface CompanyDetails {
  name: string;
  address?: string;
  phone?: string;
  email?: string;
  website?: string;
  logo?: string;
  taxNumber?: string;
  currency: string;
  taxRate: number;
}

export interface User {
  id: ID;
  email: string;
  password: string;
  role: 'admin' | 'sales' | 'warehouse' | 'manager';
  firstName: string;
  lastName: string;
  permissions: string[];
  createdAt: string;
  lastLogin?: string;
}

export interface PurchaseOrderItem {
  productId: ID;
  quantity: number;
  unitPrice: number;
  total: number;
  received?: number;
  receivedDate?: string;
}

export type PurchaseOrderStatus = 'draft' | 'sent' | 'confirmed' | 'partial' | 'received' | 'cancelled';

export interface PurchaseOrder {
  id: ID;
  poNumber: string;
  supplierId: ID;
  items: PurchaseOrderItem[];
  subtotal: number;
  taxRate: number;
  taxAmount: number;
  total: number;
  status: PurchaseOrderStatus;
  orderDate: string;
  expectedDelivery?: string;
  actualDelivery?: string;
  notes?: string;
  createdAt: string;
  updatedAt: string;
  createdBy: string;
  autoGenerated?: boolean;
  triggerReason?: string;
}

export interface AutomationRule {
  id: ID;
  name: string;
  type: 'reorder_point' | 'low_stock' | 'supplier_price' | 'demand_forecast';
  isActive: boolean;
  conditions: {
    productIds?: ID[];
    stockLevel?: number;
    priceThreshold?: number;
    timeframe?: number;
  };
  actions: {
    createPO?: boolean;
    sendAlert?: boolean;
    updatePricing?: boolean;
    notifyUsers?: ID[];
  };
  lastTriggered?: string;
  triggerCount: number;
  createdAt: string;
}

export interface AIInsight {
  id: ID;
  type: 'demand_forecast' | 'price_optimization' | 'supplier_recommendation' | 'inventory_optimization';
  title: string;
  description: string;
  confidence: number; // 0-100
  impact: 'low' | 'medium' | 'high';
  data: any;
  actionable: boolean;
  implemented?: boolean;
  createdAt: string;
  expiresAt?: string;
}

export interface Subscription {
  id: ID;
  plan: 'starter' | 'professional' | 'enterprise' | 'ai_premium';
  status: 'active' | 'cancelled' | 'expired';
  startDate: string;
  endDate: string;
  features: string[];
  maxUsers: number;
  maxProducts: number;
  maxOrders: number;
  aiFeatures: boolean;
  automationRules: number;
}

export interface ProfitAnalysis {
  productId: ID;
  costPrice: number;
  sellingPrice: number;
  markup: number;
  profit: number;
  profitMargin: number;
  bestSupplierPrice?: number;
  bestSupplierId?: ID;
}

export interface DemandForecast {
  productId: ID;
  period: string;
  predictedDemand: number;
  confidence: number;
  factors: string[];
  recommendedStock: number;
  createdAt: string;
}
